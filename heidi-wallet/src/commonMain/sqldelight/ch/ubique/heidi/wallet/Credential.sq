import ch.ubique.heidi.credentials.models.credential.CredentialType;
import ch.ubique.heidi.credentials.models.metadata.KeyMaterialType;

CREATE TABLE credentialEntity(
	id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	name TEXT NOT NULL,
	metadata TEXT NOT NULL,
	key_material_type TEXT AS KeyMaterialType NOT NULL,
	credential_type TEXT AS CredentialType NOT NULL,
	payload TEXT NOT NULL,
	doc_type TEXT NOT NULL,
	fk_oca_bundle_url TEXT DEFAULT(NULL),
	fk_identity_id INTEGER NOT NULL,
	used INTEGER NOT NULL DEFAULT (0),
	created_at INTEGER DEFAULT CURRENT_TIMESTAMP NOT NULL,
	FOREIGN KEY (fk_oca_bundle_url) REFERENCES ocaBundleEntity(url) ON UPDATE CASCADE ON DELETE RESTRICT,
	FOREIGN KEY (fk_identity_id) REFERENCES identityEntity(id) ON UPDATE CASCADE ON DELETE CASCADE
);

insert:
INSERT INTO credentialEntity(name, metadata, key_material_type, credential_type, payload, doc_type, fk_oca_bundle_url, fk_identity_id, created_at)
VALUES (:name, :metadata, :key_material_type, :credential_type, :payload, :doc_type, :oca_bundle_url, (SELECT id FROM identityEntity WHERE name = :identity_name), :created_at);

fullInsert:
INSERT INTO credentialEntity(id, name, metadata, key_material_type, credential_type, payload, doc_type, fk_oca_bundle_url, fk_identity_id, used, created_at)
VALUES (?, ?, ?,?, ?, ?,?, ?, ?, ?, ?);

getAll:
SELECT * FROM credentialEntity;

getAllUnused:
SELECT * FROM credentialEntity WHERE used = 0;

getAllByTypesAndDocTypeWhere:
SELECT * FROM credentialEntity WHERE used = ? AND credential_type IN ? AND doc_type = ?;

getAllByTypesWhere:
SELECT * FROM credentialEntity WHERE used = ? AND credential_type IN ?;

getAllByTypes:
SELECT * FROM credentialEntity WHERE credential_type IN ?;

getUnusedByTypeAndDocType:
SELECT * FROM credentialEntity WHERE used = 0 AND credential_type = ? AND doc_type = ?;

getById:
SELECT * FROM credentialEntity WHERE id = ?;

getByName:
SELECT * FROM credentialEntity WHERE name = ?;

removeByName:
DELETE FROM credentialEntity WHERE name = ?;

getByIdentity:
SELECT * FROM credentialEntity WHERE fk_identity_id = ?;

useCredential:
UPDATE credentialEntity SET used = 1 WHERE id = ?;

clear:
DELETE FROM credentialEntity;

updateMetadataById:
UPDATE credentialEntity SET metadata = :metadata WHERE id = :id;